# -*- coding: utf-8 -*-
"""
/***************************************************************************
 AccessibleParksHighlighter
                                 A QGIS plugin
 This plugin highlights accessible parks
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2024-06-30
        git sha              : $Format:%H$
        copyright            : (C) 2024 by Nikolay Mirchev
        email                : mupuhu335@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, Qt
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction
from qgis.PyQt.QtSql import *
# Initialize Qt resources from file resources.py
from .resources import *
from qgis.gui import QgsMapToolEmitPoint
from qgis.core import QgsDataSourceUri
from qgis.core import Qgis
from qgis.core import QgsProject

# Import the code for the DockWidget
from .accessible_parks_highlighter_dockwidget import AccessibleParksHighlighterDockWidget
import os.path


class AccessibleParksHighlighter:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface

        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'AccessibleParksHighlighter_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&AccessibleParksHighlighter')
        # TODO: We are going to let the user set this up in a future iteration
        self.toolbar = self.iface.addToolBar(u'AccessibleParksHighlighter')
        self.toolbar.setObjectName(u'AccessibleParksHighlighter')

        #print "** INITIALIZING AccessibleParksHighlighter"

        self.pluginIsActive = False
        self.dockwidget = None


    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('AccessibleParksHighlighter', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            self.toolbar.addAction(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action


    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/accessible_parks_highlighter/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Mark accessible parks'),
            callback=self.run,
            parent=self.iface.mainWindow())

    #--------------------------------------------------------------------------

    def onClosePlugin(self):
        """Cleanup necessary items here when plugin dockwidget is closed"""

        #print "** CLOSING AccessibleParksHighlighter"

        # disconnects
        self.dockwidget.closingPlugin.disconnect(self.onClosePlugin)
        self.point_tool.canvasClicked.disconnect(self.display_point)
        # remove this statement if dockwidget is to remain
        # for reuse if plugin is reopened
        # Commented next statement since it causes QGIS crashe
        # when closing the docked window:
        # self.dockwidget = None

        self.pluginIsActive = False


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""

        #print "** UNLOAD AccessibleParksHighlighter"

        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&AccessibleParksHighlighter'),
                action)
            self.iface.removeToolBarIcon(action)
        # remove the toolbar
        del self.toolbar

    #--------------------------------------------------------------------------

    def display_point(self, pointTool ):
        uri = QgsDataSourceUri()
        uri.setConnection("localhost", "5432", "template1", "postgres", "0048224644mN!")
        # now query the table
        db = QSqlDatabase.addDatabase("QPSQL");
        db.setHostName(uri.host())
        db.setDatabaseName(uri.database())
        db.setPort(int(uri.port()))
        db.setUserName(uri.username())
        db.setPassword(uri.password())
        db.open()
        # query the table
        
        query = db.exec_(f"""select pgfb.id, subquery.road_start_id, subquery.road_end_id, subquery.end_park_id from parkove_gradini_filtrirani_bgs pgfb
            cross join lateral
            (select roads.start_id as road_start_id, roads.end_id as road_end_id, pgfb2.id as end_park_id from parkove_gradini_filtrirani_bgs pgfb2
                inner join vertex_entries_to_park vetp
                on vetp.park_id  = pgfb.id
                inner join vertex_entries_to_park vetp2
                on vetp2.park_id = pgfb2.id
                inner join roads
                on roads.start_id = vetp.vertex_id 
                where vetp2.vertex_id = roads.end_id and pgfb.id != pgfb2.id
            ) as subquery
            where st_contains(pgfb.geom, st_geomfromtext('POINT({pointTool.x()} {pointTool.y()})', 7801));"""
        )
        query.next()
        active_layer = self.iface.activeLayer()
        active_layer.selectByExpression(f"\"id\"={query.value(0)}")
        road_layer = QgsProject.instance().mapLayersByName("roads")[0]
        while query.next():
            active_layer.selectByExpression(f"\"id\"={query.value(3)}", Qgis.SelectBehavior.AddToSelection)
            road_layer.selectByExpression(f"\"start_id\"={query.value(1)} and \"end_id\"={query.value(2)}", Qgis.SelectBehavior.AddToSelection)



    def run(self):
        """Run method that loads and starts the plugin"""

        if not self.pluginIsActive:
            self.pluginIsActive = True

            #print "** STARTING AccessibleParksHighlighter"

            # dockwidget may not exist if:
            #    first run of plugin
            #    removed on close (see self.onClosePlugin method)
            if self.dockwidget == None:
                # Create the dockwidget (after translation) and keep reference
                self.dockwidget = AccessibleParksHighlighterDockWidget()

            # connect to provide cleanup on closing of dockwidget
            self.dockwidget.closingPlugin.connect(self.onClosePlugin)

            self.point_tool = QgsMapToolEmitPoint(self.iface.mapCanvas())
            self.point_tool.canvasClicked.connect(self.display_point)
            self.iface.mapCanvas().setMapTool( self.point_tool )

            # show the dockwidget
            # TODO: fix to allow choice of dock location
            self.iface.addDockWidget(Qt.LeftDockWidgetArea, self.dockwidget)
            self.dockwidget.show()
